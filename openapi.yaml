openapi: 3.1.0
info:
  title: RO-Crate API
  summary: A comprehensive API for managing RO-Crate collections
  description: |
    ## Introduction
    This API offers a standardized approach to interacting with RO-Crate metadata in repositories that host diverse media archives, such as PARADISEC. Building on the RO-Crate specification, the endpoints here facilitate the creation, retrieval, and management of digital collections, ensuring metadata is compliant and discoverable.

    RO-Crate (Research Object Crate) is a lightweight approach to packaging research data with machine-readable metadata. By using this API, developers and archives can programmatically interface with RO-Crate-compliant collections, enabling consistent handling of metadata and files.

    ## Authentication
    This API might require various authentication methods depending on the archive’s security needs. Implementations could use tokens, OAuth 2.0, or other strategies. Details will depend on each specific deployment’s requirements. For example, PARADISEC may implement specific token-based authentication or an existing user login system. Client applications must refer to the relevant documentation or contact the archive provider for detailed authentication steps.

  contact:
    name: Issues
    url: https://github.com/johnf/ro-crate-api/issues
  x-logo:
    url: https://johnf.github.io/ro-crate-api/logo.webp
    altText: RO-Crate API logo
  license:
    name: MIT
    identifier: MIT
  version: 0.0.1
servers:
  - url: https://data.ldaca.edu.au/api
    description: LDaCA
  - url: https://catalog.paradisec.org.au/api/v1/oni
    description: PARADISEC
externalDocs:
  description: Find out more about RO-Crate
  url: https://johnf.github.com/ro-crate-api
tags:
  - name: entities
    description: Endpoints related to the creation, retrieval, and management of RO-Crate entities.
    x-displayName: Entities
  - name: search
    description: Endpoints to perform searches on archived media and metadata.
    x-displayName: Search
  - name: entity_model
    x-displayName: The Entity Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Entity" exampleRef="#/components/examples/Order" />
      This section details how the Entity schema is structured, including properties like ID, name, and conforming profile information.
x-tagGroups:
  - name: General
    tags:
      - entities
      - search
  - name: Models
    tags:
      - entity_model
paths:
  /entities:
    get:
      tags:
        - entities
      summary: List entities
      description: |
        ### Entity
        Retrieve and list the entities in a collection. This endpoint returns key metadata describing each entity (e.g., ID, name, description). The response can be filtered, paginated, and sorted, allowing clients to navigate large archives efficiently.
      operationId: listEntities
      parameters:
        - name: memberOf
          in: query
          description: Indicates that an entity is a member of another entity (e.g., a sub-collection). Use this parameter to filter results to only entities that belong to a certain parent.
          example: https://catalog.paradisec.org.au/repository/NT1
          schema:
            type: string
        - name: conformsTo
          in: query
          description: Restrict the types of entities that are returned by specifying which RO-Crate profiles they conform to.
          example: ["https://w3id.org/ldac/profile#Collection"]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ConformsTo"
        - name: limit
          in: query
          description: Maximum number of entities to return.
          example: 100
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of items to skip before returning the results, useful for pagination.
          example: 100
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: sort
          in: query
          description: Field to sort by, such as `id` or `createdAt`.
          example: id
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
              - updatedAt
            default: id
        - name: order
          in: query
          description: |
            Sort order:
            * `asc` - Ascending, from A to Z
            * `desc` - Descending, from Z to A
          example: ["asc"]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Order"
            default: ["asc"]
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: A list of entities based on the provided filters.
                required:
                  - total
                  - entities
                properties:
                  total:
                    description: Total number of entities (before pagination) that match the query.
                    type: integer
                    example: 42
                  entities:
                    type: array
                    items:
                      $ref: "#/components/schemas/Entity"

  /entity/{id}:
    get:
      tags:
        - entities
      summary: Get RO-Crate for an entity
      description: |
        ### Entity Meta
        Retrieve the RO-Crate metadata document for a specific entity. This can include references to sub-entities, attached files, or other related metadata. Depending on the repository, IDs might be translated or fully qualified to ensure resolvable identifiers.
      operationId: getEntity
      parameters:
        - name: id
          in: path
          required: true
          description: The unique RO-Crate ID representing a specific entity in the repository.
          example: https://catalog.paradisec.org.au/repository/LRB/001
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: RO-Crate JSON as defined at https://www.researchobject.org/ro-crate/specification

  /entity/{id}/file/{fileId}:
    get:
      tags:
        - entities
      summary: Get a file
      description: |
        ### Entity Open
        Retrieve an individual file that is part of a given entity’s RO-Crate. The file can be returned inline (e.g., displayed in the browser) or as an attachment for download (e.g., prompting a save dialog), based on the disposition.
      operationId: getEntityOpen
      parameters:
        - name: id
          in: path
          required: true
          description: The RO-Crate entity ID to which the file belongs.
          example: https://catalog.paradisec.org.au/repository/LRB/001
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/Id"
        - name: fileId
          in: path
          required: true
          description: The path or identifier of the file within the entity’s crate.
          example: filename.wav
          schema:
            type: string
        - name: disposition
          in: query
          description: The HTTP Content-Disposition for how the file should be handled by the client.
          example: inline
          schema:
            type: string
            enum:
              - inline
              - attachment
            default: inline
        - name: filename
          in: query
          description: When the file is served as an attachment, the name to use when saving.
          example: foo.wav
          schema:
            type: string
      responses:
        "200":
          description: Returns the requested file content.

  /search:
    post:
      tags:
        - search
      summary: Search for RO-Crate entities
      description: |
        ### Search
        Perform advanced or basic searches across the entire RO-Crate collection. This includes free text queries, as well as filters for specific fields such as `inLanguage` or `mediaType`. The search results can be paginated, sorted, and optionally returned alongside facet counts.
      operationId: search-entities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                searchType:
                  type: string
                  enum:
                    - basic
                    - advanced
                  default: basic
                  description: Specifies the search method to be used. `basic` searches across common fields, whereas `advanced` can handle Boolean queries or more complex logic.
                query:
                  type: string
                  description: |
                    he query string used in the search. Behavior depends on `searchType`. For `basic`, this can be free text. For `advanced`, Boolean operators can be used.

                    When searchType is `basic` this is a free text field of text to search.

                    When searchType is `advanced` this is boolean search field
                    Examples:
                      name: John
                      name: John AND description: Engineer
                      name: John AND (description: Engineer OR description: developer)

                    NOTE: It is expected that most implementors of this API will use OpenSearch and the above is the OpenSearch API
                    This is the most basic that MUST be implemented.
                    API implementors can support full OpenSearch queries if they wish, refer to your implementations documentation for details
                filters:
                  type: object
                  description: |
                    A set of key-value pairs representing additional filters. Keys can be metadata fields (like `inLanguage` or `mediaType`), with each value being an array of acceptable values.
                  additionalProperties:
                    name: keyword
                    type: array
                    items:
                      type: string
                  example:
                    {
                      "inLanguage": ["English", "Japanese"],
                      "mediaType": ["image/png"],
                    }
                limit:
                  description: Maximum number of entities to return per page.
                  example: 100
                  schema:
                    type: integer
                    format: int32
                    minimum: 1
                    maximum: 1000
                    default: 100
                offset:
                  description: Number of items to skip before returning the results, enabling paging.
                  example: 100
                  schema:
                    type: integer
                    format: int32
                    minimum: 0
                    default: 0
                sort:
                  description: The field on which to sort results (e.g., `id`, `updatedAt`).
                  example: id
                  schema:
                    type: string
                    enum:
                      - id
                      - name
                      - createdAt
                      - updatedAt
                    default: id
                order:
                  description: |
                    Sort order:
                    * `asc` - Ascending, from A to Z
                    * `desc` - Descending, from Z to A
                  example: ["asc"]
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                    default: ["asc"]

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: A list of entities matching the query, plus optional facets.
                required:
                  - total
                  - searchTime
                  - entities
                properties:
                  total:
                    description: Total number of entities (before pagination) matching the query.
                    type: integer
                    example: 42
                  searchTime:
                    description: The search duration in milliseconds.
                    type: number
                    example: 42.34
                  entities:
                    allOf:
                      - $ref: "#/components/schemas/Entity"
                      - $ref: "#/components/schemas/SearchEntity"
                  facets:
                    type: object
                    description: Contains facet counts for the search. Keys are facet fields, and values are arrays of objects indicating the facet name and count.
                    additionalProperties:
                      name: keyword
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The facet value or label.
                          count:
                            type: integer
                            description: Number of results that match this facet value.
                    example:
                      {
                        "inLanguage":
                          [
                            { "name": "English", "count": 100 },
                            { "name": "Japanese", "count": 5 },
                          ],
                      }

components:
  schemas:
    Id:
      type: string
      format: uri
      readOnly: true
      description: A URI-based identifier, used to reference the entity or file in the RO-Crate. This ensures global uniqueness and enables cross-linking of entities.
    RecordType:
      type: string
      enum:
        - DataSet
        - RepositoryCollection
        - RepositoryObject
      description: An enumerated type describing the nature of the entity, such as dataset or specific repository objects.
    Order:
      type: string
      enum:
        - asc
        - desc
      description: Used to specify the order in sorting results.
    AccessControl:
      description: Access control level as defined at https://w3id.org/ldac/terms#authorizationWorkflow. Determines how an entity may be accessed by users.
      type: string
      enum:
        - Public
        - AgreeToTerms
        - AuthorizationByApplication
        - AuthorizationByInvitation
        - SelfAuthorization
        - AccessControlList
    CommunicationMode:
      description: Communication modes as defined at https://w3id.org/ldac/terms#communicationMode. These are typically relevant for language and communication data.
      type: string
      enum:
        - Gesture
        - SignedLanguage
        - Song
        - SpokenLanguage
        - WhistledLanguage
        - WrittenLanguage
    ConformsTo:
      type: string
      enum:
        - https://w3id.org/ldac/profile#Collection
        - https://w3id.org/ldac/profile#Object
      description: Specifies the profile or schema that the entity conforms to, ensuring consistency in metadata structure.
    Entity:
      type: object
      description: An entity represents a single collection or item within the repository, conforming to a specific RO-Crate profile.
      required:
        - id
        - name
        - description
        - conformsTo
        - recordType
      properties:
        id:
          description: RO-Crate ID that uniquely identifies this entity.
          example: https://catalog.paradisec.org.au/repository/LRB/001
          allOf:
            - $ref: "#/components/schemas/Id"
        name:
          description: Name of the entity.
          type: string
          example: Recordings of West Alor languages
          maxLength: 64
        description:
          description: A concise description of the entity’s contents or purpose.
          type: string
          example: A compilation of recordings featuring various West Alor languages, curated for linguistic research.
          maxLength: 256
        conformsTo:
          description: The profile or schema the entity follows (e.g., an LDAC Collection).
          example: https://w3id.org/ldac/profile#Collection
          allOf:
            - $ref: "#/components/schemas/ConformsTo"
        recordType:
          description: The entity’s classification, indicating if it is a dataset, repository collection, or repository object.
          example:
            - DataSet
            - RepositoryCollection
          type: array
          items:
            $ref: "#/components/schemas/RecordType"
        memberOf:
          description: An optional parent entity that this entity belongs to.
          example: https://catalog.paradisec.org.au/repository/LRB
          allOf:
            - $ref: "#/components/schemas/Id"
        root:
          description: The top-level collection or repository this entity is part of.
          example: https://catalog.paradisec.org.au/repository/LRB
          allOf:
            - $ref: "#/components/schemas/Id"
        createdAt:
          description: The ISO 8601 timestamp denoting when the entity was created.
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        updatedAt:
          description: The ISO 8601 timestamp denoting when the entity was last updated.
          type: string
          format: date-time
          example: 2023-01-02T12:00:00Z
        extra:
          type: object
          description: Additional optional fields providing further descriptive metadata about the entity.
          properties:
            collectionCount:
              type: integer
              description: The total number of collections in the subtree of this entity, if applicable.
            objectCount:
              type: integer
              description: The total number of objects in the subtree of this entity.
            subCcollectionCount:
              type: integer
              description: The number of nested sub-collections within this entity.
            fileCount:
              type: integer
              description: The number of individual files attached to or within this entity’s structure.
            language:
              description: All languages contained in the sub-tree of entities. Useful for archives that store diverse linguistic data.
              type: array
              items:
                type: string
              example:
                - English
                - Italian
            accessControl:
              description: The level of access control required to view or download this entity.
              example: Public
              allOf:
                - $ref: "#/components/schemas/AccessControl"
            communicationMode:
              description: The modes of communication found in this entity’s data, such as speech, song, or sign.
              example: ["Song"]
              type: array
              items:
                $ref: "#/components/schemas/CommunicationMode"
            mediaType:
              description: Media types (MIME types) of files within this entity.
              example:
                - text/html
                - text/csv
              type: array
              items:
                type: string
    SearchEntity:
      description: Contains additional information returned in search contexts.
      properties:
        searchExtra:
          type: object
          description: Extra search-related metadata.
          properties:
            score:
              type: number
              description: The relevance score for this entity, based on the search.
            highlight:
              type: array
              items:
                type: string
              description: Selected text snippets from fields matching the query, which can be displayed to users for context.
