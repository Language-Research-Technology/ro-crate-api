openapi: 3.1.0
info:
  title: RO-Crate API
  summary: A comprehensive API for managing RO-Crate collections
  description: |
    ## Introduction
    This API offers a standardised approach to interacting with RO-Crate metadata in repositories that host diverse media archives, such as PARADISEC. Building on the RO-Crate specification, the endpoints here facilitate the creation, retrieval, and management of digital collections, ensuring metadata is compliant and discoverable.

    RO-Crate (Research Object Crate) is a lightweight approach to packaging research data with machine-readable metadata. By using this API, developers and archives can programmatically interface with RO-Crate-compliant collections, enabling consistent handling of metadata and files.

    This documentation covers what a valid implementation of this API should look like.

    ## Authentication

    It is expected that most archives will allow public access but there will typically be entities which are private or require authorization.

    When authentication is required, an API implementation MUST implement OAuth2 and it is recommended that OpenID is also added for simpler configuration and discoverability.

    ## Rate Limiting

    API implementations MAY implement rate limiting to ensure fair usage and system stability. When rate limiting is active, responses will include rate limit headers (`X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`) and will return a 429 status code when limits are exceeded.

  contact:
    name: Issues
    url: https://github.com/johnf/ro-crate-api/issues
  x-logo:
    url: https://johnf.github.io/ro-crate-api/logo.webp
    altText: RO-Crate API logo
  license:
    name: MIT
    identifier: MIT
  version: 0.0.1
servers:
  - url: https://data.ldaca.edu.au/api
    description: LDaCA
  - url: https://catalog.paradisec.org.au/api/v1/oni
    description: PARADISEC
externalDocs:
  description: Find out more about RO-Crate
  url: https://johnf.github.io/ro-crate-api
tags:
  - name: entities
    description: Endpoints related to the creation, retrieval, and management of RO-Crate entities.
    x-displayName: Entities
  - name: search
    description: Endpoints to perform searches on archived media and metadata.
    x-displayName: Search
  - name: entity_model
    x-displayName: The Entity Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Entity" exampleRef="#/components/examples/EntityResponse" />
      This section details how the Entity schema is structured, including properties like ID, name, and conforming profile information.
x-tagGroups:
  - name: General
    tags:
      - entities
      - search
  - name: Models
    tags:
      - entity_model
security:
  - ApiKey: []
  - OAuth2:
      - read
  - OpenID:
      - read
paths:
  /entities:
    get:
      tags:
        - entities
      summary: List entities
      description: |
        ### Entity
        Retrieve and list the entities in a collection. This endpoint returns key metadata describing each entity (e.g., ID, name, description). The response can be filtered, paginated, and sorted, allowing clients to navigate large archives efficiently.
      operationId: listEntities
      parameters:
        - name: memberOf
          in: query
          description: Indicates that an entity is a member of another entity (e.g., a sub-collection). Use this parameter to filter results to only entities that belong to a certain parent.
          example: https://catalog.paradisec.org.au/repository/NT1
          schema:
            type: string
        - name: entityType
          in: query
          description: Restrict the types of entities that are returned by specifying which RO-Crate profiles they conform to.
          example: ["http://pcdm.org/models#Collection"]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EntityType"
        - name: limit
          in: query
          description: Maximum number of entities to return.
          example: 100
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of items to skip before returning the results, useful for pagination.
          example: 100
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: sort
          in: query
          description: Field to sort by, such as `id` or `createdAt`.
          example: id
          schema:
            type: string
            enum:
              - id
              - name
              - createdAt
              - updatedAt
            default: id
        - name: order
          in: query
          description: |
            Sort order:
            * `asc` - Ascending, from A to Z
            * `desc` - Descending, from Z to A
          example: ["asc"]
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Order"
            default: ["asc"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: A list of entities based on the provided filters.
                required:
                  - total
                  - entities
                properties:
                  total:
                    description: Total number of entities (before pagination) that match the query.
                    type: integer
                    example: 42
                  entities:
                    type: array
                    items:
                      $ref: "#/components/schemas/Entity"
              examples:
                EntitiesListResponse:
                  $ref: "#/components/examples/EntitiesListResponse"
        "400":
          description: Bad Request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access token does not have the required scope
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          $ref: "#/components/responses/RateLimitResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entity/{id}:
    get:
      tags:
        - entities
      summary: Get an entity
      description: |
        ### Entity
        Retrieve and an entity in a collection. This endpoint returns key metadata describing each entity (e.g., ID, name, description).
      operationId: getEntity
      parameters:
        - name: id
          in: path
          required: true
          description: The unique RO-Crate ID representing a specific entity in the repository.
          example: https://catalog.paradisec.org.au/repository/LRB/001
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
              examples:
                EntityResponse:
                  $ref: "#/components/examples/EntityResponse"
        "400":
          description: Bad Request - Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access token does not have the required scope
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Entity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          $ref: "#/components/responses/RateLimitResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entity/{id}/file/{fileId}:
    get:
      tags:
        - entities
      summary: Get a file
      description: |
        ### Entity Open
        Retrieve an individual file that is part of a given entity’s RO-Crate. The file can be returned inline (e.g., displayed in the browser) or as an attachment for download (e.g., prompting a save dialog), based on the disposition.
        The API can serve the file or redirect to the location of the file
      operationId: getEntityOpen
      parameters:
        - name: id
          in: path
          required: true
          description: The RO-Crate entity ID to which the file belongs.
          example: https://catalog.paradisec.org.au/repository/LRB/001
          schema:
            type: string
            allOf:
              - $ref: "#/components/schemas/Id"
        - name: fileId
          in: path
          required: true
          description: The path or identifier of the file within the entity’s crate.
          example: filename.wav
          schema:
            type: string
        - name: disposition
          in: query
          description: The HTTP Content-Disposition for how the file should be handled by the client.
          example: inline
          schema:
            type: string
            enum:
              - inline
              - attachment
            default: inline
        - name: filename
          in: query
          description: When the file is served as an attachment, the name to use when saving.
          example: foo.wav
          schema:
            type: string
        - name: noRedirect
          in: query
          description: Return the location as JSON instead of a 302 redirect.
          example: true
          schema:
            type: boolean
        - name: Range
          in: header
          description: Request specific byte range(s) of the file. Supports standard HTTP Range header syntax.
          example: "bytes=0-1023"
          schema:
            type: string
            pattern: '^bytes=\d*-\d*(,\d*-\d*)*$'
      responses:
        "200":
          description: 'Returns the requested file content or { "location": "http://location/of/file" }'
          headers:
            Accept-Ranges:
              schema:
                type: string
                enum: [bytes]
              description: Indicates that the server supports range requests for this file
            Content-Length:
              schema:
                type: integer
              description: The size of the returned content in bytes
            Content-Type:
              schema:
                type: string
              description: The MIME type of the returned file
            Last-Modified:
              schema:
                type: string
                format: date-time
              description: The date and time the file was last modified
            ETag:
              schema:
                type: string
              description: Entity tag for cache validation
        "206":
          description: Partial Content - returned when Range header is present and valid
          headers:
            Accept-Ranges:
              schema:
                type: string
                enum: [bytes]
              description: Indicates that the server supports range requests
            Content-Range:
              schema:
                type: string
                pattern: '^bytes \d+-\d+/\d+$'
              description: Indicates the byte range returned (e.g., "bytes 200-1023/1024")
              example: "bytes 0-1023/2048"
            Content-Length:
              schema:
                type: integer
              description: The size of the returned partial content in bytes
            Content-Type:
              schema:
                type: string
              description: The MIME type of the returned file
        "302":
          description: Redirects to file location
        "400":
          description: Bad Request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access token does not have the required scope
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Entity or file not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "416":
          description: Range Not Satisfiable - the requested range is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          headers:
            Content-Range:
              schema:
                type: string
                pattern: '^bytes \*/\d+$'
              description: Indicates the total size of the file when range is not satisfiable
              example: "bytes */2048"
        "429":
          $ref: "#/components/responses/RateLimitResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /search:
    post:
      tags:
        - search
      summary: Search for RO-Crate entities
      description: |
        ### Search
        Perform advanced or basic searches across the entire RO-Crate collection. This includes free text queries, as well as filters for specific fields such as `inLanguage` or `mediaType`. The search results can be paginated, sorted, and optionally returned alongside facet counts.
      operationId: search-entities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                searchType:
                  type: string
                  enum:
                    - basic
                    - advanced
                  default: basic
                  description: Specifies the search method to be used. `basic` searches across common fields, whereas `advanced` can handle Boolean queries or more complex logic.
                query:
                  type: string
                  description: |
                    The query string used in the search. Behavior depends on `searchType`. For `basic`, this can be free text. For `advanced`, Boolean operators can be used.

                    When searchType is `basic` this is a free text field of text to search.

                    When searchType is `advanced` this is a boolean search field.
                    Examples:
                      name: John
                      name: John AND description: Engineer
                      name: John AND (description: Engineer OR description: developer)

                    NOTE: This API is implementation-agnostic. The examples above show basic boolean syntax that most search engines support.
                    API implementors may support additional query syntax - refer to your implementation's documentation for details.
                filters:
                  type: object
                  description: |
                    A set of key-value pairs representing additional filters. Keys can be metadata fields (like `inLanguage` or `mediaType`), with each value being an array of acceptable values.
                  additionalProperties:
                    name: keyword
                    type: array
                    items:
                      type: string
                  example:
                    {
                      "inLanguage": ["English", "Japanese"],
                      "mediaType": ["image/png"],
                    }
                boundingBox:
                  type: object
                  description: Will filter the results to entities that exist inside the bounding box.
                  required:
                    - topRight
                    - bottomLeft
                  properties:
                    topRight:
                      type: object
                      properties:
                        lat:
                          type: number
                          minimum: -90
                          maximum: 90
                          description: Latitude coordinate
                        lng:
                          type: number
                          minimum: -180
                          maximum: 180
                          description: Longitude coordinate
                      required:
                        - lat
                        - lng
                    bottomLeft:
                      type: object
                      properties:
                        lat:
                          type: number
                          minimum: -90
                          maximum: 90
                          description: Latitude coordinate
                        lng:
                          type: number
                          minimum: -180
                          maximum: 180
                          description: Longitude coordinate
                      required:
                        - lat
                        - lng
                  example:
                    {
                      "topRight": { "lat": -33.7, "lng": 151.3 },
                      "bottomLeft": { "lat": -34.1, "lng": 150.9 },
                    }
                geohashPrecision:
                  type: integer
                  minimum: 1
                  maximum: 12
                  description: If supplied, returns a geohash grid with this precision. Must be between 1 (lowest precision) and 12 (highest precision).
                  example: 7
                limit:
                  description: Maximum number of entities to return per page.
                  example: 100
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 1000
                  default: 100
                offset:
                  description: Number of items to skip before returning the results, enabling paging.
                  example: 100
                  type: integer
                  format: int32
                  minimum: 0
                  default: 0
                sort:
                  description: The field on which to sort results (e.g., `id`, `updatedAt`).
                  example: id
                  type: string
                  enum:
                    - id
                    - name
                    - createdAt
                    - updatedAt
                  default: id
                order:
                  description: |
                    Sort order:
                    * `asc` - Ascending, from A to Z
                    * `desc` - Descending, from Z to A
                  example: ["asc"]
                  type: array
                  items:
                    $ref: "#/components/schemas/Order"
                  default: ["asc"]
            examples:
              SearchRequest:
                $ref: "#/components/examples/SearchRequest"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: A list of entities matching the query, plus optional facets.
                required:
                  - total
                  - searchTime
                  - entities
                properties:
                  total:
                    description: Total number of entities (before pagination) matching the query.
                    type: integer
                    example: 42
                  searchTime:
                    description: The search duration in milliseconds.
                    type: number
                    example: 42.34
                  entities:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Entity"
                        - $ref: "#/components/schemas/SearchEntity"
                  facets:
                    type: object
                    description: Contains facet counts for the search. Keys are facet fields, and values are arrays of objects indicating the facet name and count.
                    additionalProperties:
                      name: keyword
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The facet value or label.
                          count:
                            type: integer
                            description: Number of results that match this facet value.
                    example:
                      {
                        "inLanguage":
                          [
                            { "name": "English", "count": 100 },
                            { "name": "Japanese", "count": 5 },
                          ],
                      }
                  geohashGrid:
                    type: object
                    description: Present when boundingBox is used with a precision. Contains counts of entities in each geohash area. Keys are geohash values, and values are the count of entities in that area.
                    additionalProperties:
                      type: integer
                    example: { "r3": 30, "r6": 4 }
              examples:
                SearchResponse:
                  $ref: "#/components/examples/SearchResponse"
        "400":
          description: Bad Request - Invalid search parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access token does not have the required scope
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Unprocessable Entity - Invalid query syntax
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "429":
          $ref: "#/components/responses/RateLimitResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  responses:
    RateLimitResponse:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Requests remaining in current time window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when the rate limit resets
        Retry-After:
          schema:
            type: integer
          description: Number of seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RateLimitError"
    UnauthorizedResponse:
      description: Not authenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ForbiddenResponse:
      description: Access token does not have the required scope
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication. Provides a simpler alternative to OAuth2 for server-to-server integrations.

    OpenID:
      type: openIdConnect
      description: It is recommended that API implementations implement OpenID to make discovery and implementation easier.
      openIdConnectUrl: /.well-known/openid-configuration

    OAuth2:
      type: oauth2
      description: API implementations that contain data which needs to be protected MUST implement authorisation using OAuth 2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes:
            read: Grants read access

  schemas:
    Id:
      type: string
      format: uri
      pattern: '^https?:\/\/.+'
      readOnly: true
      description: A URI-based identifier, used to reference the entity or file in the RO-Crate. This ensures global uniqueness and enables cross-linking of entities.
      example: "https://catalog.paradisec.org.au/repository/LRB/001"
    EntityType:
      type: string
      enum:
        - http://pcdm.org/models#Collection
        - http://pcdm.org/models#Object
        - http://schema.org/MediaObject
        - http://schema.org/Person
      description: An enumerated type describing the nature of the entity, such as a collection or object
    Order:
      type: string
      enum:
        - asc
        - desc
      description: Used to specify the order in sorting results.
    Entity:
      type: object
      description: An entity represents a single collection or item within the repository, conforming to a specific RO-Crate profile.
      required:
        - id
        - name
        - entityType
        - memberOf
        - rootCollection
        - metadataLicenseId
        - contentLicenseId
        - access
      properties:
        id:
          description: RO-Crate ID that uniquely identifies this entity.
          example: https://catalog.paradisec.org.au/repository/LRB/001
          allOf:
            - $ref: "#/components/schemas/Id"
        name:
          description: Name of the entity.
          type: string
          example: Recordings of West Alor languages
          maxLength: 64
        description:
          description: A concise description of the entity’s contents or purpose.
          type: string
          example: A compilation of recordings featuring various West Alor languages, curated for linguistic research.
          maxLength: 256
        entityType:
          description: The main classification of the entity
          example: http://pcdm.org/models#Collection
          allOf:
            - $ref: "#/components/schemas/EntityType"
        memberOf:
          description: An optional parent entity that this entity belongs to.
          example: https://catalog.paradisec.org.au/repository/LRB
          allOf:
            - $ref: "#/components/schemas/Id"
        rootCollection:
          description: The top-level collection this entity is part of.
          example: https://catalog.paradisec.org.au/repository/LRB
          allOf:
            - $ref: "#/components/schemas/Id"
        metadataLicenseId:
          description: The metadata license.
          example: "https://test.cadre.example.com/catalogue/application?id=https%3A%2F%2Fhttps%3A%2F%2Fcatalog.paradisec.org.au%2Flicenses%2Ftest"
          allOf:
            - $ref: "#/components/schemas/Id"
        contentLicenseId:
          description: The metadata license.
          example: "https://test.cadre.example.com/catalogue/application?id=https%3A%2F%2Fhttps%3A%2F%2Fcatalog.paradisec.org.au%2Flicenses%2Ftest"
          allOf:
            - $ref: "#/components/schemas/Id"
        access:
          type: object
          description: Access information for this entity, including permissions and enrollment details.
          required:
            - metadata
            - content
          properties:
            metadata:
              type: boolean
              description: Whether metadata for this entity is accessible to the current user.
            content:
              type: boolean
              description: Whether content within this entity is accessible to the current user.
            metadataAuthorizationUrl:
              type: string
              format: uri
              description: URL for enrollment or authorization process if access is restricted.
            contentAuthorizationUrl:
              type: string
              format: uri
              description: URL for enrollment or authorization process if access is restricted.
          example:
            metadata: true
            content: false
            contentAuthorizationUrl: "https://test.cadre.example.com/catalogue/application?id=https%3A%2F%2Fhttps%3A%2F%2Fcatalog.paradisec.org.au%2Flicenses%2Ftest"
    SearchEntity:
      description: Contains additional information returned in search contexts.
      properties:
        searchExtra:
          type: object
          description: Extra search-related metadata.
          properties:
            score:
              type: number
              description: The relevance score for this entity, based on the search.
            highlight:
              type: object
              additionalProperties:
                name: keyword
                type: array
                items:
                  type: string
              description: Selected text snippets from fields matching the query, which can be displayed to users for context.
    ErrorResponse:
      type: object
      description: Standard error response format
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Machine-readable error code
              example: INVALID_REQUEST
            message:
              type: string
              description: Human-readable error message
              example: The request parameters are invalid
            details:
              type: object
              description: Additional error details specific to the error type
              additionalProperties: true
              example:
                field: id
                value: invalid-uri
            requestId:
              type: string
              format: uuid
              description: Unique identifier for this request, useful for debugging
              example: 550e8400-e29b-41d4-a716-446655440000
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            error:
              type: object
              properties:
                code:
                  enum: [VALIDATION_ERROR]
                details:
                  type: object
                  properties:
                    violations:
                      type: array
                      items:
                        type: object
                        properties:
                          field:
                            type: string
                            description: The field that failed validation
                          message:
                            type: string
                            description: Validation error message
                          value:
                            description: The invalid value
                      example:
                        - field: limit
                          message: must be between 1 and 1000
                          value: 2000
    NotFoundError:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            error:
              type: object
              properties:
                code:
                  enum: [NOT_FOUND]
                message:
                  example: The requested entity was not found

    RateLimitError:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - type: object
          properties:
            error:
              type: object
              properties:
                code:
                  enum: [RATE_LIMIT_EXCEEDED]
                message:
                  example: Rate limit exceeded. Please retry after the specified time.
                details:
                  type: object
                  properties:
                    retryAfter:
                      type: integer
                      description: Number of seconds to wait before retrying
                      example: 60

  examples:
    EntityResponse:
      summary: Example entity response
      value:
        id: "https://catalog.paradisec.org.au/repository/LRB/001"
        name: "Recordings of West Alor languages"
        description: "A compilation of recordings featuring various West Alor languages, curated for linguistic research."
        entityType: "http://pcdm.org/models#Collection"
        memberOf: "https://catalog.paradisec.org.au/repository/LRB"
        rootCollection: "https://catalog.paradisec.org.au/repository/LRB"
        metadataLicenseId: "https://catalog.paradisec.org.au/licenses/metadata"
        contentLicenseId: "https://catalog.paradisec.org.au/licenses/content"
        access:
          metadata: true
          content: false
          contentAuthorizationUrl: "https://test.cadre.example.com/catalogue/application?id=https%3A%2F%2Fhttps%3A%2F%2Fcatalog.paradisec.org.au%2Flicenses%2Ftest"

    EntitiesListResponse:
      summary: Example entities list response
      value:
        total: 42
        entities:
          - id: "https://catalog.paradisec.org.au/repository/LRB/001"
            name: "Recordings of West Alor languages"
            description: "A compilation of recordings featuring various West Alor languages"
            entityType: "http://pcdm.org/models#Collection"
            memberOf: "https://catalog.paradisec.org.au/repository/LRB"
            rootCollection: "https://catalog.paradisec.org.au/repository/LRB"
            metadataLicenseId: "https://catalog.paradisec.org.au/licenses/metadata"
            contentLicenseId: "https://catalog.paradisec.org.au/licenses/content"
            access:
              metadata: true
              content: false
          - id: "https://catalog.paradisec.org.au/repository/LRB/002"
            name: "Another collection"
            description: "Another example collection"
            entityType: "http://pcdm.org/models#Collection"
            memberOf: "https://catalog.paradisec.org.au/repository/LRB"
            rootCollection: "https://catalog.paradisec.org.au/repository/LRB"
            metadataLicenseId: "https://catalog.paradisec.org.au/licenses/metadata"
            contentLicenseId: "https://catalog.paradisec.org.au/licenses/content"
            access:
              metadata: true
              content: true

    SearchRequest:
      summary: Example search request
      value:
        searchType: "advanced"
        query: "name: West Alor AND description: linguistic"
        filters:
          inLanguage:
            - "English"
          mediaType:
            - "audio/wav"
        boundingBox:
          topRight:
            lat: -33.7
            lng: 151.3
          bottomLeft:
            lat: -34.1
            lng: 150.9
        limit: 20
        offset: 0
        sort: "updatedAt"
        order:
          - "desc"

    SearchResponse:
      summary: Example search response with facets
      value:
        total: 15
        searchTime: 42.34
        entities:
          - id: "https://catalog.paradisec.org.au/repository/LRB/001"
            name: "Recordings of West Alor languages"
            description: "A compilation of recordings featuring various West Alor languages"
            entityType: "http://pcdm.org/models#Collection"
            memberOf: "https://catalog.paradisec.org.au/repository/LRB"
            rootCollection: "https://catalog.paradisec.org.au/repository/LRB"
            metadataLicenseId: "https://catalog.paradisec.org.au/licenses/metadata"
            contentLicenseId: "https://catalog.paradisec.org.au/licenses/content"
            access:
              metadata: true
              content: false
            searchExtra:
              score: 0.95
              highlight:
                name:
                  - "Recordings of <em>West Alor</em> languages"
                description:
                  - "featuring various West Alor languages, curated for <em>linguistic</em> research"
        facets:
          inLanguage:
            - name: "English"
              count: 10
            - name: "Italian"
              count: 5
          mediaType:
            - name: "audio/wav"
              count: 8
            - name: "text/plain"
              count: 7
        geohashGrid:
          r3gx: 5
          r3gy: 3

    ValidationErrorResponse:
      summary: Example validation error response
      value:
        error:
          code: "VALIDATION_ERROR"
          message: "Request validation failed"
          details:
            violations:
              - field: "limit"
                message: "must be between 1 and 1000"
                value: 2000
              - field: "id"
                message: "must be a valid URI"
                value: "invalid-uri"
          requestId: "550e8400-e29b-41d4-a716-446655440000"

    NotFoundErrorResponse:
      summary: Example not found error response
      value:
        error:
          code: "NOT_FOUND"
          message: "The requested entity was not found"
          details:
            entityId: "https://catalog.paradisec.org.au/repository/MISSING/001"
          requestId: "550e8400-e29b-41d4-a716-446655440000"
